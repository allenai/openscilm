import React, { useCallback, useEffect } from 'react';
import { Box, Button, ButtonGroup, LinearProgress, Typography, Modal } from '@mui/material';
import IconButton from '@mui/material/IconButton';
import CloseIcon from '@mui/icons-material/Close';
import { StatusType, updateStatus } from '../api/utils';
import { Report } from './report/Report';
import { useQueryHistory } from './shared';
import { useNavigate } from 'react-router-dom';
import { Progress, ProgressPropType } from './Progress';
import { Sections } from './Sections';


const DEFAULT_INTERVAL = 3000;

interface PropType {
  taskId: string;
  interval?: number;
}

export const Results: React.FC<PropType> = (props) => {
  const { taskId, interval = DEFAULT_INTERVAL } = props;
  const { history, setHistory } = useQueryHistory();
  const navigate = useNavigate();

  const [status, setStatus] = React.useState<StatusType | undefined>();
  const [_isLoading, setIsLoading] = React.useState<boolean>(false);

  const handleDeleteTask = useCallback(() => {
    if (confirm('Are you sure you want to delete this? This cannot be undone.')) {
      const newHistory = { ...history };
      try {
        delete newHistory[taskId];
        setHistory(newHistory);
        navigate('/');
      } catch (e) {
        console.error('delete task failed', e);
      }
    }
  }, [taskId, history, setHistory]);

  useEffect(() => {
    const timeoutIds: number[] = [];
    const inner = async () => {
      setIsLoading(true);
      const newStatus = await updateStatus(taskId);
      setIsLoading(false);
      console.log('setStatus', newStatus)
      setStatus(newStatus);
      const taskRunning = !newStatus || 'task_status' in newStatus
      if (taskRunning && newStatus.httpStatus !== 404) {
        const timeoutId = window.setTimeout(inner, interval);
        timeoutIds.push(timeoutId);
      }
    }
    inner();
    return () => {
      timeoutIds.forEach(clearTimeout);
    }
  }, [taskId, interval, setIsLoading]);

  // const section = status?.task_result?.sections.at(-1);
  const sections = status?.task_result?.sections ?? [];
  let progressProps: Omit<ProgressPropType, 'isRunning'> = {
    estimatedTime: 'Loading...',
    startTime: -1,
    status: 'Loading...',
    httpStatus: 200
  }
  if (status?.httpStatus !== 200) {
    console.log('A')
    progressProps = {
      estimatedTime: 'Error',
      startTime: -1,
      status: status?.detail ?? 'Something went wrong - please try asking again',
      httpStatus: status?.httpStatus ?? 500
    }
  }
  // if (!status?.task_result) {
  const taskRunning = !status || 'task_status' in status
  console.log('taskRunning', taskRunning, status)
  if (taskRunning && status?.httpStatus !== 200) {
    try {
      console.log('B')
      const startTime = parseFloat(status?.task_status.split(':').at(0) ?? '0')
      const statusText = status?.task_status.split(':').at(-1) ?? 'Loading...'
      progressProps = {
        estimatedTime: status?.estimated_time?.split(':')?.at(-1) ?? 'Loading...',
        startTime,
        status: statusText,
        httpStatus: status?.httpStatus ?? 200
      }
    } catch (e) {
      console.error('error parsing status', e);
    }
  }
  const handleScrollToDisclaimer = useCallback(() => {
    document.querySelector('.disclaimer')?.scrollIntoView({ behavior: 'smooth' });
  }, []);
  console.log('progressProps', progressProps)

  const [open, setOpen] = React.useState(false);
  const handleModalOpen = () => setOpen(true);
  const handleModalClose = () => setOpen(false);

  return (
    <>
      {/* {isLoading && <LinearProgress style={{ marginBottom: '-4px' }} />} */}
      <div style={{
        display: 'flex', justifyContent:
          'space-between', alignItems: 'baseline'
      }}>
        <h3 style={{ flexGrow: 1 }}>{status?.query ?? 'Error'}</h3>
        <ButtonGroup size="small" variant='text' aria-label="Small button group" style={{ flex: '0 0 220px' }}>

          {sections.length > 0 && <Button color='secondary' onClick={handleModalOpen}>Disclaimer</Button>}

          <Button color='secondary' onClick={handleDeleteTask}>Remove from history</Button>
        </ButtonGroup>
      </div>

      <Modal
        open={open}
        onClose={handleModalClose}
        aria-labelledby="modal-modal-title"
        aria-describedby="modal-modal-description"
      >
        <Box sx={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', width: '60vw', bgcolor: 'background.paper', boxShadow: 24, padding: '16px 32px' }}>
          <h3>Disclaimer: What should I be cautious of when using features that employ generative AI?</h3>
          <p>Since text in these features is generated by a language model, it will not be free of errors, and the errors could be difficult to detect. Possible errors include: </p>
          <ul>
            <li>Factual inaccuracies. Most of these will be subtle, but some may be serious factual errors </li>
            <li>Awkwardly phrased answers</li>
            <li>Irrelevant information.</li>
          </ul>
          <p>While we generally found the system to be accurate, you should verify the accuracy of generated text whenever possible.</p>
        </Box>
      </Modal>


      <Progress {...progressProps} isRunning={taskRunning} />
      {sections.length > 0 && (
        <>
          {/* <Box
            sx={{
              display: 'flex',
              flexDirection: 'row',
              alignItems: 'center',
              width: '100%',
              justifyContent: 'space-between',
              marginBottom: '6px',
              '& > *': {
                m: 0,
              },
            }}
          >
            {!(taskRunning) && (
              <>
                <ButtonGroup size="small" aria-label="Small button group" style={{ marginRight: '12px' }}>
                  <Button key="one">Good</Button>
                  <Button key="two">Bad</Button>
                </ButtonGroup>
                <Button key="three" onClick={handleDeleteTask}>Remove from history</Button>
              </>
            )}
          </Box> */}

          <Sections sections={sections} />
        </>
      )}
    </>
  );
};
